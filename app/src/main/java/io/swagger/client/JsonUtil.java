/**
 * Kiosk API
 * <p>
 * <p>
 * OpenAPI spec version: 0.0.1
 * <p>
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.List;

import io.swagger.client.model.*;

public class JsonUtil {
    public static GsonBuilder gsonBuilder;

    static {
        gsonBuilder = new GsonBuilder();
        gsonBuilder.serializeNulls();
        gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    }

    public static Gson getGson() {
        return gsonBuilder.create();
    }

    public static String serialize(Object obj) {
        return getGson().toJson(obj);
    }

    public static <T> T deserializeToList(String jsonString, Class cls) {
        return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
    }

    public static <T> T deserializeToObject(String jsonString, Class cls) {
        return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
    }

    public static Type getListTypeForDeserialization(Class cls) {
        String className = cls.getSimpleName();

        if ("AddOrderReq".equalsIgnoreCase(className)) {
            return new TypeToken<List<AddOrderReq>>() {
            }.getType();
        }

        if ("AddOrderReqDetail".equalsIgnoreCase(className)) {
            return new TypeToken<List<AddOrderReqDetail>>() {
            }.getType();
        }

        if ("AddOrderReqOption".equalsIgnoreCase(className)) {
            return new TypeToken<List<AddOrderReqOption>>() {
            }.getType();
        }

        if ("AddOrderRes".equalsIgnoreCase(className)) {
            return new TypeToken<List<AddOrderRes>>() {
            }.getType();
        }

        if ("AddOrderResData".equalsIgnoreCase(className)) {
            return new TypeToken<List<AddOrderResData>>() {
            }.getType();
        }

        if ("LoginReq".equalsIgnoreCase(className)) {
            return new TypeToken<List<LoginReq>>() {
            }.getType();
        }

        if ("LoginRes".equalsIgnoreCase(className)) {
            return new TypeToken<List<LoginRes>>() {
            }.getType();
        }

        if ("LoginResData".equalsIgnoreCase(className)) {
            return new TypeToken<List<LoginResData>>() {
            }.getType();
        }

        if ("MenuOptionReq".equalsIgnoreCase(className)) {
            return new TypeToken<List<MenuOptionReq>>() {
            }.getType();
        }

        if ("MenuOptionRes".equalsIgnoreCase(className)) {
            return new TypeToken<List<MenuOptionRes>>() {
            }.getType();
        }

        if ("MenuOptionResData".equalsIgnoreCase(className)) {
            return new TypeToken<List<MenuOptionResData>>() {
            }.getType();
        }

        if ("MenuOptionResData1".equalsIgnoreCase(className)) {
            return new TypeToken<List<MenuOptionResData1>>() {
            }.getType();
        }

        if ("MenuOptionResOptions".equalsIgnoreCase(className)) {
            return new TypeToken<List<MenuOptionResOptions>>() {
            }.getType();
        }

        if ("MenuReq".equalsIgnoreCase(className)) {
            return new TypeToken<List<MenuReq>>() {
            }.getType();
        }

        if ("MenuRes".equalsIgnoreCase(className)) {
            return new TypeToken<List<MenuRes>>() {
            }.getType();
        }

        if ("MenuResData".equalsIgnoreCase(className)) {
            return new TypeToken<List<MenuResData>>() {
            }.getType();
        }

        if ("OrderCompleteReq".equalsIgnoreCase(className)) {
            return new TypeToken<List<OrderCompleteReq>>() {
            }.getType();
        }

        if ("OrderCompleteRes".equalsIgnoreCase(className)) {
            return new TypeToken<List<OrderCompleteRes>>() {
            }.getType();
        }

        if ("OrderCompleteResData".equalsIgnoreCase(className)) {
            return new TypeToken<List<OrderCompleteResData>>() {
            }.getType();
        }

        if ("OrderReq".equalsIgnoreCase(className)) {
            return new TypeToken<List<OrderReq>>() {
            }.getType();
        }

        if ("OrderRes".equalsIgnoreCase(className)) {
            return new TypeToken<List<OrderRes>>() {
            }.getType();
        }

        if ("OrderResData".equalsIgnoreCase(className)) {
            return new TypeToken<List<OrderResData>>() {
            }.getType();
        }

        if ("OrderResDetail".equalsIgnoreCase(className)) {
            return new TypeToken<List<OrderResDetail>>() {
            }.getType();
        }

        if ("OrderResOption".equalsIgnoreCase(className)) {
            return new TypeToken<List<OrderResOption>>() {
            }.getType();
        }

        if ("StoresReq".equalsIgnoreCase(className)) {
            return new TypeToken<List<StoresReq>>() {
            }.getType();
        }

        if ("StoresRes".equalsIgnoreCase(className)) {
            return new TypeToken<List<StoresRes>>() {
            }.getType();
        }

        if ("StoresResData".equalsIgnoreCase(className)) {
            return new TypeToken<List<StoresResData>>() {
            }.getType();
        }

        if ("SubcategoryReq".equalsIgnoreCase(className)) {
            return new TypeToken<List<SubcategoryReq>>() {
            }.getType();
        }

        if ("SubcategoryRes".equalsIgnoreCase(className)) {
            return new TypeToken<List<SubcategoryRes>>() {
            }.getType();
        }

        if ("SubcategoryResData".equalsIgnoreCase(className)) {
            return new TypeToken<List<SubcategoryResData>>() {
            }.getType();
        }

        return new TypeToken<List<Object>>() {
        }.getType();
    }

    public static Type getTypeForDeserialization(Class cls) {
        String className = cls.getSimpleName();

        if ("AddOrderReq".equalsIgnoreCase(className)) {
            return new TypeToken<AddOrderReq>() {
            }.getType();
        }

        if ("AddOrderReqDetail".equalsIgnoreCase(className)) {
            return new TypeToken<AddOrderReqDetail>() {
            }.getType();
        }

        if ("AddOrderReqOption".equalsIgnoreCase(className)) {
            return new TypeToken<AddOrderReqOption>() {
            }.getType();
        }

        if ("AddOrderRes".equalsIgnoreCase(className)) {
            return new TypeToken<AddOrderRes>() {
            }.getType();
        }

        if ("AddOrderResData".equalsIgnoreCase(className)) {
            return new TypeToken<AddOrderResData>() {
            }.getType();
        }

        if ("LoginReq".equalsIgnoreCase(className)) {
            return new TypeToken<LoginReq>() {
            }.getType();
        }

        if ("LoginRes".equalsIgnoreCase(className)) {
            return new TypeToken<LoginRes>() {
            }.getType();
        }

        if ("LoginResData".equalsIgnoreCase(className)) {
            return new TypeToken<LoginResData>() {
            }.getType();
        }

        if ("MenuOptionReq".equalsIgnoreCase(className)) {
            return new TypeToken<MenuOptionReq>() {
            }.getType();
        }

        if ("MenuOptionRes".equalsIgnoreCase(className)) {
            return new TypeToken<MenuOptionRes>() {
            }.getType();
        }

        if ("MenuOptionResData".equalsIgnoreCase(className)) {
            return new TypeToken<MenuOptionResData>() {
            }.getType();
        }

        if ("MenuOptionResData1".equalsIgnoreCase(className)) {
            return new TypeToken<MenuOptionResData1>() {
            }.getType();
        }

        if ("MenuOptionResOptions".equalsIgnoreCase(className)) {
            return new TypeToken<MenuOptionResOptions>() {
            }.getType();
        }

        if ("MenuReq".equalsIgnoreCase(className)) {
            return new TypeToken<MenuReq>() {
            }.getType();
        }

        if ("MenuRes".equalsIgnoreCase(className)) {
            return new TypeToken<MenuRes>() {
            }.getType();
        }

        if ("MenuResData".equalsIgnoreCase(className)) {
            return new TypeToken<MenuResData>() {
            }.getType();
        }

        if ("OrderCompleteReq".equalsIgnoreCase(className)) {
            return new TypeToken<OrderCompleteReq>() {
            }.getType();
        }

        if ("OrderCompleteRes".equalsIgnoreCase(className)) {
            return new TypeToken<OrderCompleteRes>() {
            }.getType();
        }

        if ("OrderCompleteResData".equalsIgnoreCase(className)) {
            return new TypeToken<OrderCompleteResData>() {
            }.getType();
        }

        if ("OrderReq".equalsIgnoreCase(className)) {
            return new TypeToken<OrderReq>() {
            }.getType();
        }

        if ("OrderRes".equalsIgnoreCase(className)) {
            return new TypeToken<OrderRes>() {
            }.getType();
        }

        if ("OrderResData".equalsIgnoreCase(className)) {
            return new TypeToken<OrderResData>() {
            }.getType();
        }

        if ("OrderResDetail".equalsIgnoreCase(className)) {
            return new TypeToken<OrderResDetail>() {
            }.getType();
        }

        if ("OrderResOption".equalsIgnoreCase(className)) {
            return new TypeToken<OrderResOption>() {
            }.getType();
        }

        if ("StoresReq".equalsIgnoreCase(className)) {
            return new TypeToken<StoresReq>() {
            }.getType();
        }

        if ("StoresRes".equalsIgnoreCase(className)) {
            return new TypeToken<StoresRes>() {
            }.getType();
        }

        if ("StoresResData".equalsIgnoreCase(className)) {
            return new TypeToken<StoresResData>() {
            }.getType();
        }

        if ("SubcategoryReq".equalsIgnoreCase(className)) {
            return new TypeToken<SubcategoryReq>() {
            }.getType();
        }

        if ("SubcategoryRes".equalsIgnoreCase(className)) {
            return new TypeToken<SubcategoryRes>() {
            }.getType();
        }

        if ("SubcategoryResData".equalsIgnoreCase(className)) {
            return new TypeToken<SubcategoryResData>() {
            }.getType();
        }

        return new TypeToken<Object>() {
        }.getType();
    }

};
